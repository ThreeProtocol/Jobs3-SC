import * as anchor from '@project-serum/anchor';
import { Program, Wallet } from '@project-serum/anchor';
// import { Program, Wallet } from "@coral-xyz/anchor@0.30.1";
import { TOKEN_PROGRAM_ID, Token, ASSOCIATED_TOKEN_PROGRAM_ID } from '@solana/spl-token';
import { Connection, PublicKey, Keypair, SystemProgram, Transaction } from '@solana/web3.js';
import { v4 as uuid } from 'uuid';
import { GigBasicContract } from '../target/types/gig_basic_contract';

const secret = require('~/.config/solana/id.json');
let contractId: string = "a4fc3529";

// Set up the connection to the Devnet
const connection = new Connection('https://api.devnet.solana.com', 'confirmed');

// Load your wallet
const wallet = Keypair.fromSecretKey(new Uint8Array(secret)); // Replace with your secret key

// Define the program ID of your deployed contract
const programId = new PublicKey('4Wijqow1TA9kSs3o9XkYsb817abaTmNoqe6pohoNoqXx'); // Replace with your program ID

// Create an Anchor provider
const provider = new anchor.AnchorProvider(connection, wallet, anchor.AnchorProvider.defaultOptions());
console.log("------------- getting provider success -------------");
anchor.setProvider(provider);

async function TestJobListing(): Promise<void> {
    // Load the program
    // const program = new anchor.Program(GigBasicContract, programId); // Replace `GigBasicContract` with your program's IDL
    const program = anchor.workspace
    .GigBasicContract as Program<GigBasicContract>;
    // Generate a new contract ID
    contractId = uuid().slice(0, 8); // Replace with a unique contract ID

    // Create associated token accounts if necessary
    const employerAta = await createAssociatedTokenAccount(wallet.publicKey, "EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v");
    const contractAta = await createAssociatedTokenAccount(programId, "EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v");

    // Call the job_listing_with_one_fee_employer function
    try {
        const tx = await program.rpc.jobListingWithOneFeeEmployer(contractId, {
            accounts: {
                employer: wallet.publicKey,
                jobContract: contractAta, // Replace with the actual job contract account
                employerAta: employerAta,
                contractAta: contractAta,
                employerTokenAccount: employerAta,
                programTokenAccount: contractAta,
                tokenProgram: TOKEN_PROGRAM_ID,
                associatedTokenProgram: TOKEN_PROGRAM_ID, // Use the correct associated token program ID
                systemProgram: SystemProgram.programId,
            },
        });

        console.log("Transaction successful with signature:", tx);
    } catch (error) {
        console.error("Transaction failed:", error);
    }
}

async function createAssociatedTokenAccount(owner: PublicKey, mint: string): Promise<PublicKey> {
    const mintPublicKey = new PublicKey(mint);
    const associatedToken = await PublicKey.findProgramAddress(
        [
            owner.toBuffer(),
            TOKEN_PROGRAM_ID.toBuffer(),
            mintPublicKey.toBuffer(),
        ],
        TOKEN_PROGRAM_ID // Use the correct associated token program ID
    );

    const transaction = new Transaction().add(
        SystemProgram.createAccount({
            fromPubkey: owner,
            newAccountPubkey: associatedToken[0],
            lamports: await connection.getMinimumBalanceForRentExemption(165),
            space: 165,
            programId: TOKEN_PROGRAM_ID,
        }),
        Token.createInitAccountInstruction(
            TOKEN_PROGRAM_ID,
            mintPublicKey,
            associatedToken[0],
            owner
        )
    );

    await provider.sendAndConfirm(transaction, [wallet]);
    return associatedToken[0];
}

// Run the test
TestJobListing();